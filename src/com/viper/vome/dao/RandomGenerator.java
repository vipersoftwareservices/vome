
/*
 * -----------------------------------------------------------------------------
 *                      VIPER SOFTWARE SERVICES
 * -----------------------------------------------------------------------------
 *
 * MIT License
 * 
 * Copyright (c) #{classname}.html #{util.YYYY()} Viper Software Services
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE
 *
 * -----------------------------------------------------------------------------
 */

package com.viper.vome.dao;

import java.math.BigDecimal;
import java.sql.Timestamp;
import java.util.Date;
import java.util.Random;

public class RandomGenerator {

    private static final Random random = new Random();
    private static final String TEMPLATE = "abcdefghijklmnopqrstuvwxyz";
    private static final long ONE_YEAR = 365 * 24 * 60 * 60 * 1000;

    public static final Object generateRandomValue(Column column) {

        if (column.isAutoIncrement()) {
            return null;
        }

        int dataType = column.getDataType();
        Class<?> clazz = Conversions.getConversionClass(dataType);

        if (clazz == String.class) {
            int size = (column.getColumnSize() <= 0 || column.getColumnSize() > 100) ? 100 : column.getColumnSize();
            return randomString(1, size);
        }
        if (clazz == Integer.class) {
            return randomInt(0, 1024);
        }
        if (clazz == Short.class) {
            return randomShort(0, 1024);
        }
        if (clazz == Byte.class) {
            return randomByte(0, 123);
        }
        if (clazz == Float.class) {
            return randomDouble(0, 1024);
        }
        if (clazz == Double.class) {
            return randomDouble(0, 1024);
        }
        if (clazz == Boolean.class) {
            return randomBoolean(50.0);
        }
        if (clazz == Byte[].class) {
            return randomBytes(1, 50);
        }
        if (clazz == BigDecimal.class) {
            return randomDouble(0.0, 100000.0);
        }

        System.err.println("No Random number generated for class = " + dataType + "," + clazz);
        return null;
    }

    /**
     * @param minlen
     * @param maxlen
     * @return the randomly generated string, of random length between min and max len.
     */
    private static final String randomString(int minlen, int maxlen) {

        int length = (minlen == maxlen) ? maxlen : randomInt(minlen, maxlen);
        StringBuilder buf = new StringBuilder(length);
        for (int i = 0; i < length; i++) {
            int i1 = randomInt(0, 26);
            buf.append(TEMPLATE.charAt(i1));
        }
        return buf.toString();
    }

    public final static int randomInt(int i1, int i2) {
        if (i1 > i2) {
            throw new IllegalArgumentException("Start cannot exceed End.");
        }
        return (int) randomDouble(i1, i2);
    }

    /**
     * @param min
     * @param max
     * @return
     */
    public final static double randomDouble(double min, double max) {
        return random.nextDouble() * (max - min) + min;
    }

    /**
     * @param percentage
     * @return
     */
    public final static Boolean randomBoolean(double percentage) {
        double value = randomDouble(0.0, 100.0);
        return (value < 50.0) ? true : false;
    }

    /**
     * @param min
     * @param max
     * @return a randomly generated byte between specified values.
     */
    public final static byte randomByte(int min, int max) {
        return (byte) randomInt(min, max);
    }

    /**
     * @param minlen
     * @param maxlen
     * @return
     */
    public final static byte[] randomBytes(int minlen, int maxlen) {
        int length = (minlen == maxlen) ? maxlen : randomInt(minlen, maxlen);
        byte[] buf = new byte[length];
        for (int i = 0; i < length; i++) {
            buf[i] = (byte) randomInt(-127, 127);
        }
        return buf;
    }

    /**
     * @return
     */
    public final static long randomTimestamp() {
        return randomLong(System.currentTimeMillis() - ONE_YEAR, System.currentTimeMillis() + ONE_YEAR);
    }

    /**
     * @param systime
     * @param minDtStr
     * @param maxDtStr
     * @return
     */
    public final static Date randomDate(long systime, String minDtStr, String maxDtStr) {
        long minDt = Long.parseLong(minDtStr);
        long maxDt = Long.parseLong(maxDtStr);
        return new Date(randomLong(systime - minDt, systime + maxDt));
    }

    /**
     * @param systime
     * @param minDt
     * @param maxDt
     * @return
     */
    public final static Date randomDate(long systime, long minDt, long maxDt) {
        return new Date(randomLong(systime - minDt, systime + maxDt));
    }

    /**
     * @param systime
     * @param minDtStr
     * @param maxDtStr
     * @return
     */
    public final static Timestamp randomTimestamp(long systime, String minDtStr, String maxDtStr) {
        long minDt = Long.parseLong(minDtStr);
        long maxDt = Long.parseLong(maxDtStr);
        long time = randomLong(systime - minDt, systime + maxDt);
        return new Timestamp(time);
    }

    /**
     * @param systime
     * @param minDt
     * @param maxDt
     * @return
     */
    public final static Timestamp randomTimestamp(long systime, long minDt, long maxDt) {
        long time = randomLong(systime - minDt, systime + maxDt);
        return new Timestamp(time);
    }

    /**
     * @param i1
     * @param i2
     * @return
     */
    public final static short randomShort(int i1, int i2) {
        if (i1 > i2) {
            throw new IllegalArgumentException("Start cannot exceed End.");
        }
        return (short) ((i2 - i1) * random.nextDouble() + i1);
    }

    /**
     * @param min
     * @param max
     * @return
     */
    public final static long randomLong(long min, long max) {
        return (long) randomDouble(min, max);
    }

}
